{"ast":null,"code":"module.exports = {\n  compareTwoStrings,\n  findBestMatch\n};\n\nfunction compareTwoStrings(first, second) {\n  first = first.replace(/\\s+/g, '');\n  second = second.replace(/\\s+/g, '');\n  if (!first.length && !second.length) return 1; // if both are empty strings\n\n  if (!first.length || !second.length) return 0; // if only one is empty string\n\n  if (first === second) return 1; // identical\n\n  if (first.length === 1 && second.length === 1) return 0; // both are 1-letter strings\n\n  if (first.length < 2 || second.length < 2) return 0; // if either is a 1-letter string\n\n  let firstBigrams = new Map();\n\n  for (let i = 0; i < first.length - 1; i++) {\n    const bigram = first.substr(i, 2);\n    const count = firstBigrams.has(bigram) ? firstBigrams.get(bigram) + 1 : 1;\n    firstBigrams.set(bigram, count);\n  }\n\n  ;\n  let intersectionSize = 0;\n\n  for (let i = 0; i < second.length - 1; i++) {\n    const bigram = second.substr(i, 2);\n    const count = firstBigrams.has(bigram) ? firstBigrams.get(bigram) : 0;\n\n    if (count > 0) {\n      firstBigrams.set(bigram, count - 1);\n      intersectionSize++;\n    }\n  }\n\n  return 2.0 * intersectionSize / (first.length + second.length - 2);\n}\n\nfunction findBestMatch(mainString, targetStrings) {\n  if (!areArgsValid(mainString, targetStrings)) throw new Error('Bad arguments: First argument should be a string, second should be an array of strings');\n  const ratings = [];\n  let bestMatchIndex = 0;\n\n  for (let i = 0; i < targetStrings.length; i++) {\n    const currentTargetString = targetStrings[i];\n    const currentRating = compareTwoStrings(mainString, currentTargetString);\n    ratings.push({\n      target: currentTargetString,\n      rating: currentRating\n    });\n\n    if (currentRating > ratings[bestMatchIndex].rating) {\n      bestMatchIndex = i;\n    }\n  }\n\n  const bestMatch = ratings[bestMatchIndex];\n  return {\n    ratings,\n    bestMatch,\n    bestMatchIndex\n  };\n}\n\nfunction flattenDeep(arr) {\n  return Array.isArray(arr) ? arr.reduce((a, b) => a.concat(flattenDeep(b)), []) : [arr];\n}\n\nfunction areArgsValid(mainString, targetStrings) {\n  if (typeof mainString !== 'string') return false;\n  if (!Array.isArray(targetStrings)) return false;\n  if (!targetStrings.length) return false;\n  if (targetStrings.find(s => typeof s !== 'string')) return false;\n  return true;\n}\n\nfunction letterPairs(str) {\n  const pairs = [];\n\n  for (let i = 0, max = str.length - 1; i < max; i++) pairs[i] = str.substring(i, i + 2);\n\n  return pairs;\n}\n\nfunction wordLetterPairs(str) {\n  const pairs = str.toUpperCase().split(' ').map(letterPairs);\n  return flattenDeep(pairs);\n}","map":null,"metadata":{},"sourceType":"script"}